"""init

Revision ID: 40ff2173620b
Revises: 
Create Date: 2023-12-07 13:12:37.109119

"""
from typing import Sequence, Union
import fastapi_users_db_sqlalchemy
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '40ff2173620b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('privilege_rules',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('rule_name', sa.VARCHAR(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('rule_description', sa.VARCHAR(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='test'
    )
    op.create_index(op.f('ix_test_privilege_rules_rule_name'), 'privilege_rules', ['rule_name'], unique=True, schema='test')
    op.create_table('user',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_name', sa.VARCHAR(), nullable=False),
    sa.Column('email', sa.VARCHAR(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('hashed_password', sa.String(length=1024), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='test'
    )
    op.create_index(op.f('ix_test_user_email'), 'user', ['email'], unique=False, schema='test')
    op.create_index(op.f('ix_test_user_user_name'), 'user', ['user_name'], unique=True, schema='test')
    op.create_table('accesstoken',
    sa.Column('user_id', fastapi_users_db_sqlalchemy.generics.GUID(), nullable=False),
    sa.Column('token', sa.String(length=43), nullable=False),
    sa.Column('created_at', fastapi_users_db_sqlalchemy.generics.TIMESTAMPAware(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['test.user.id'], ondelete='cascade'),
    sa.PrimaryKeyConstraint('token'),
    schema='test'
    )
    op.create_index(op.f('ix_test_accesstoken_created_at'), 'accesstoken', ['created_at'], unique=False, schema='test')
    op.create_table('mat_def',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('mat_id', sa.VARCHAR(), nullable=False),
    sa.Column('mat_base_type', sa.VARCHAR(), nullable=False, comment='ingot or wafering'),
    sa.Column('mat_description', sa.VARCHAR(), nullable=True),
    sa.Column('mat_type', sa.VARCHAR(), nullable=True),
    sa.Column('mat_grp_1', sa.VARCHAR(), nullable=True),
    sa.Column('mat_grp_2', sa.VARCHAR(), nullable=True),
    sa.Column('mat_grp_3', sa.VARCHAR(), nullable=True),
    sa.Column('mat_grp_4', sa.VARCHAR(), nullable=True),
    sa.Column('mat_grp_5', sa.VARCHAR(), nullable=True),
    sa.Column('mat_grp_6', sa.VARCHAR(), nullable=True),
    sa.Column('mat_grp_7', sa.VARCHAR(), nullable=True),
    sa.Column('mat_grp_8', sa.VARCHAR(), nullable=True),
    sa.Column('mat_cmf_1', sa.VARCHAR(), nullable=True),
    sa.Column('mat_cmf_2', sa.VARCHAR(), nullable=True),
    sa.Column('mat_cmf_3', sa.VARCHAR(), nullable=True),
    sa.Column('mat_cmf_4', sa.VARCHAR(), nullable=True),
    sa.Column('def_qty_1', sa.Float(), nullable=True),
    sa.Column('def_qty_2', sa.Float(), nullable=True),
    sa.Column('def_qty_3', sa.Float(), nullable=True),
    sa.Column('first_flow', sa.VARCHAR(), nullable=True),
    sa.Column('delete_flag', sa.Boolean(), nullable=True),
    sa.Column('created_time', sa.DateTime(), nullable=True),
    sa.Column('updated_time', sa.DateTime(), nullable=True),
    sa.Column('updated_by', sa.VARCHAR(), nullable=False),
    sa.ForeignKeyConstraint(['updated_by'], ['test.user.user_name'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='test'
    )
    op.create_index(op.f('ix_test_mat_def_first_flow'), 'mat_def', ['first_flow'], unique=False, schema='test')
    op.create_index(op.f('ix_test_mat_def_mat_id'), 'mat_def', ['mat_id'], unique=False, schema='test')
    op.create_table('mat_group_def',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group_name', sa.VARCHAR(), nullable=False),
    sa.Column('group_type', sa.VARCHAR(), nullable=False, comment='group defined for different purpose'),
    sa.Column('group_description', sa.VARCHAR(), nullable=True),
    sa.Column('created_by', sa.VARCHAR(), nullable=False),
    sa.Column('created_time', sa.DateTime(), nullable=True),
    sa.Column('updated_time', sa.DateTime(), nullable=True),
    sa.Column('updated_by', sa.VARCHAR(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['test.user.user_name'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['test.user.user_name'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='test'
    )
    op.create_index(op.f('ix_test_mat_group_def_group_name'), 'mat_group_def', ['group_name'], unique=False, schema='test')
    op.create_table('privilege_group',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('group_name', sa.VARCHAR(), nullable=False),
    sa.Column('group_description', sa.VARCHAR(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('created_time', sa.DateTime(), nullable=False),
    sa.Column('group_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['test.user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='test'
    )
    op.create_table('mat_group',
    sa.Column('mat_id', sa.Integer(), nullable=True),
    sa.Column('mat_group_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['mat_group_id'], ['test.mat_group_def.id'], ),
    sa.ForeignKeyConstraint(['mat_id'], ['test.mat_def.id'], ),
    schema='test'
    )
    op.create_index('ix_mat_group_id', 'mat_group', ['mat_group_id'], unique=False, schema='test')
    op.create_index('ix_mat_id', 'mat_group', ['mat_id'], unique=False, schema='test')
    op.create_table('rule_group',
    sa.Column('rule_id', sa.Integer(), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['test.privilege_group.id'], ),
    sa.ForeignKeyConstraint(['rule_id'], ['test.privilege_rules.id'], ),
    schema='test'
    )
    op.create_table('user_group',
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['test.privilege_group.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['test.user.id'], ),
    schema='test'
    )
    op.create_index('ix_user_id', 'user_group', ['user_id'], unique=False, schema='test')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_user_id', table_name='user_group', schema='test')
    op.drop_table('user_group', schema='test')
    op.drop_table('rule_group', schema='test')
    op.drop_index('ix_mat_id', table_name='mat_group', schema='test')
    op.drop_index('ix_mat_group_id', table_name='mat_group', schema='test')
    op.drop_table('mat_group', schema='test')
    op.drop_table('privilege_group', schema='test')
    op.drop_index(op.f('ix_test_mat_group_def_group_name'), table_name='mat_group_def', schema='test')
    op.drop_table('mat_group_def', schema='test')
    op.drop_index(op.f('ix_test_mat_def_mat_id'), table_name='mat_def', schema='test')
    op.drop_index(op.f('ix_test_mat_def_first_flow'), table_name='mat_def', schema='test')
    op.drop_table('mat_def', schema='test')
    op.drop_index(op.f('ix_test_accesstoken_created_at'), table_name='accesstoken', schema='test')
    op.drop_table('accesstoken', schema='test')
    op.drop_index(op.f('ix_test_user_user_name'), table_name='user', schema='test')
    op.drop_index(op.f('ix_test_user_email'), table_name='user', schema='test')
    op.drop_table('user', schema='test')
    op.drop_index(op.f('ix_test_privilege_rules_rule_name'), table_name='privilege_rules', schema='test')
    op.drop_table('privilege_rules', schema='test')
    # ### end Alembic commands ###
